{
 "Resources": {
  "helloworldlambdaServiceRole1E1C4841": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "LamdbaCDKStack/hello-world-lambda/ServiceRole/Resource"
   }
  },
  "helloworldlambda89B27E55": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "0e10398e511d7240bd546537e8de1db2df2c5e33864b1091987a01ef156b349b.jar"
    },
    "FunctionName": "HelloWorldLambda",
    "Handler": "org.functions.HelloWorldLambda",
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "helloworldlambdaServiceRole1E1C4841",
      "Arn"
     ]
    },
    "Runtime": "java11",
    "Timeout": 20
   },
   "DependsOn": [
    "helloworldlambdaServiceRole1E1C4841"
   ],
   "Metadata": {
    "aws:cdk:path": "LamdbaCDKStack/hello-world-lambda/Resource",
    "aws:asset:path": "asset.0e10398e511d7240bd546537e8de1db2df2c5e33864b1091987a01ef156b349b.jar",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "helloworldeventbridgelambdaServiceRole8B861F91": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "LamdbaCDKStack/hello-world-eventbridge-lambda/ServiceRole/Resource"
   }
  },
  "helloworldeventbridgelambdaCE0373A9": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "0e10398e511d7240bd546537e8de1db2df2c5e33864b1091987a01ef156b349b.jar"
    },
    "FunctionName": "HelloWorldLambdaEventBridge",
    "Handler": "org.functions.HelloWorldLambdaEventBridge::handleRequest",
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "helloworldeventbridgelambdaServiceRole8B861F91",
      "Arn"
     ]
    },
    "Runtime": "java11",
    "Timeout": 20
   },
   "DependsOn": [
    "helloworldeventbridgelambdaServiceRole8B861F91"
   ],
   "Metadata": {
    "aws:cdk:path": "LamdbaCDKStack/hello-world-eventbridge-lambda/Resource",
    "aws:asset:path": "asset.0e10398e511d7240bd546537e8de1db2df2c5e33864b1091987a01ef156b349b.jar",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "lambdaschedulerA538E6EB": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Name": "LambdaRule",
    "ScheduleExpression": "rate(1 minute)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "helloworldeventbridgelambdaCE0373A9",
        "Arn"
       ]
      },
      "Id": "Target0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "LamdbaCDKStack/lambda-scheduler/Resource"
   }
  },
  "lambdaschedulerAllowEventRuleLamdbaCDKStackhelloworldeventbridgelambdaE5AF5CFC22978F0A": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "helloworldeventbridgelambdaCE0373A9",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "lambdaschedulerA538E6EB",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "LamdbaCDKStack/lambda-scheduler/AllowEventRuleLamdbaCDKStackhelloworldeventbridgelambdaE5AF5CFC"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/02NTQ6CMBBGz+K+jPycQEhcuDLlAGYooxmBacK0smi4uwE1cfW+5OXlK6EoS8gPuGjm+iEbuYPUBnSDwUVvacSp6xHSOYoL7MU0d/nfV5onVmUvq2GcIFk/0iY2rkarG6pSUDhtMFpBHd1AoUYlQy+SoJBs/DZxpHU1ltTH2ZHZmzbgg+Wx+59o7tJ46Tnsvxd84bEoIIcyh+LwVOZsjhJ4IrAfvgEGhjEr5wAAAA=="
   },
   "Metadata": {
    "aws:cdk:path": "LamdbaCDKStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}